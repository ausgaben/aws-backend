type Account {
  name: String!
  isSavingsAccount: Boolean!
  defaultCurrency: Currency
  _meta: EntityMeta!
}

type AccountsQueryResult {
  nextStartKey: ID
  items: [Account]!
}

type AutoCompleteStrings {
  field: ID!
  strings: [String!]!
}

type CreateEntityResult {
  id: ID!
}

type Currency {
  id: ID!
  symbol: String!
}

type EntityMeta {
  id: ID!
  createdAt: String!
  updatedAt: String
  version: Int!
  name: String!
}

type ExchangeRate {
  currency: Currency!
  rate: Float!
  date: String!
}

type Mutation {
  createAccount(
    name: String!
    isSavingsAccount: Boolean
    defaultCurrencyId: ID
  ): CreateEntityResult!
  deleteAccount(accountId: ID!): Boolean
  createSpending(
    accountId: ID!
    bookedAt: String!
    booked: Boolean
    category: String!
    description: String!
    amount: Int!
    currencyId: ID!
    savingForAccountId: ID
  ): CreateEntityResult!
  deleteSpending(spendingId: ID!): Boolean
  inviteUser(accountId: ID!, userId: ID!): CreateEntityResult!
  updateSpending(
    spendingId: ID!
    booked: Boolean
    bookedAt: String
    category: String
    description: String
    amount: Int
    currencyId: ID
    savingForAccountId: ID
  ): Boolean
  updateAccount(
    accountId: ID!
    expectedVersion: Int!
    name: String!
    defaultCurrencyId: ID
  ): Boolean
}

type Query {
  accounts(filter: accountsFilterInput, startKey: ID): AccountsQueryResult!
  spendings(
    accountId: ID!
    startDate: String!
    endDate: String!
    startKey: ID
  ): SpendingsQueryResult!
  autoCompleteStrings(accountId: ID!): [AutoCompleteStrings!]!
  exchangeRate(currencyId: ID!, date: String!): ExchangeRate!
}

type Schema {
  mutation: Mutation
  query: Query
}

type Spending {
  account: Account!
  bookedAt: String!
  booked: Boolean!
  category: String!
  description: String!
  amount: Int!
  currency: Currency!
  savingForAccount: Account
  _meta: EntityMeta!
}

type SpendingsQueryResult {
  nextStartKey: ID
  items: [Spending]!
}

input accountsFilterInput {
  accountId: ID!
}
