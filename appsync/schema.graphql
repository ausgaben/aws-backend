type Account {
    name: String!
    isSavingsAccount: Boolean!
    defaultCurrency: Currency
    _meta: EntityMeta!
}

input accountsFilterInput {
    accountId: ID!
}

type AccountsQueryResult {
    nextStartKey: ID
    items: [Account]!
}

type AutoCompleteStrings {
    field: ID!
    strings: [String!]!
}

type CreateEntityResult {
    id: ID!
}

type Currency {
    id: ID!
    toEUR: Float!
}

type EntityMeta {
    id: ID!
    createdAt: String!
    updatedAt: String
    version: Int!
    name: String!
}

type Mutation {
    createAccount(name: String!, isSavingsAccount: Boolean, defaultCurrencyId: ID): CreateEntityResult!
    deleteAccount(accountId: ID!): Boolean
    createSpending(accountId: ID!, bookedAt: String!, booked: Boolean, category: String!, description: String!, amount: Int!,
        currencyId: ID!, paidWith: String): CreateEntityResult!
    deleteSpending(spendingId: ID!): Boolean
    inviteUser(accountId: ID!, userId: ID!): CreateEntityResult!
    updateSpending(spendingId: ID!, booked: Boolean): Boolean
}

type Query {
    accounts(filter: accountsFilterInput, startKey: ID): AccountsQueryResult!
    spendings(accountId: ID!, startDate: String!, endDate: String!, startKey: ID): SpendingsQueryResult!
    autoCompleteStrings(accountId: ID!): [AutoCompleteStrings!]!
}

type Schema {
    mutation: Mutation
    query: Query
}

type Spending {
    account: Account!
    bookedAt: String!
    booked: Boolean!
    category: String!
    description: String!
    amount: Int!
    currency: Currency!
    paidWith: String
    _meta: EntityMeta!
}

type SpendingsQueryResult {
    nextStartKey: ID
    items: [Spending]!
}
